name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    uses: ./.github/workflows/build-common.yml
    with:
      upload_artifacts: true
      verify_version: true

  docker:
    needs: build  # Needs build for the binary, but does not release artifacts
    uses: ./.github/workflows/docker.yml

  debian:
    needs: build
    uses: ./.github/workflows/debian.yml

  release:
    name: Create Release
    needs: debian # docker is not needed for release
    runs-on: ubuntu-22.04
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      # Downloads from linux-x86_64 specific build job (build-common.yml):
      # - Individual files: snapshot-gossip-client, example-config.toml, README.md, INSTALL.md
      # - tar.gz bundle: snapshot-gossip-client-linux-x86_64.tar.gz (as artifact 'tarball-linux-x86_64')
      - name: List available artifacts
        run: |
          echo "Available artifacts:"
          gh api repos/${{ github.repository }}/actions/artifacts | jq '.artifacts[] | .name'

      # Download all artifacts from the build workflow
      # Note: The linux-x86_64 artifact will be downloaded to artifacts/linux-x86_64/
      # because it contains multiple files, while the debian-packages artifact
      # will be downloaded directly to release_assets/
      - name: Create release assets directory
        run: mkdir -p release_assets

      - name: Download tarball artifact
        # This downloads the build-output artifact containing versionless tar.gz and zip
        uses: actions/download-artifact@v5
        with:
          name: build-output-linux-x86_64
          path: release_assets

      # Downloads from debian job (debian.yml):
      # - Debian package: debian-package artifact
      # Note: This will be downloaded directly to release_assets/
      - name: Download Debian package(s)
        uses: actions/download-artifact@v5
        with:
          name: debian-packages
          path: release_assets

      - name: Rename archives with version tag
        # Also extracts necessary docs from the tarball
        # Release job only runs on tags, so github.ref_name is like 'v1.2.3'
        run: |
          cd release_assets
          VERSION_TAG="${{ github.ref_name }}"
          REPO_NAME="${{ github.event.repository.name }}"
          TARBALL_NAME_VER="${REPO_NAME}-${VERSION_TAG}-linux-x86_64.tar.gz"
          TARBALL_NAME_NOVER="${REPO_NAME}-linux-x86_64.tar.gz"
          # Extract specific docs before renaming the tarball
          echo "Extracting docs from ${TARBALL_NAME_NOVER}"
          tar xzf "${TARBALL_NAME_NOVER}" --strip-components=2 "${REPO_NAME}/doc/README.md" "${REPO_NAME}/doc/INSTALL.md"
          # Verify extraction
          ls -l README.md INSTALL.md

          echo "Renaming archives with version: ${VERSION_TAG}"
          mv "${TARBALL_NAME_NOVER}" "${TARBALL_NAME_VER}"
          echo "Renamed files:"
          ls -l
          cd ..

      - name: Debug artifacts directory
        run: |
          echo "Contents of release_assets directory:"
          ls -la release_assets/

      # Generate sha256sums for the main release assets
      - name: Generate Checksums
        run: |
          cd release_assets
          # Checksum the renamed tar.gz and the deb file(s)
          # Use wildcard for deb as its name includes version determined by debian.yml
          VERSION_TAG="${{ github.ref_name }}"
          REPO_NAME="${{ github.event.repository.name }}"
          sha256sum \
            "${REPO_NAME}-${VERSION_TAG}-linux-x86_64.tar.gz" \
            agave-snapshot-gossip-client_*.deb > sha256sums.txt
          echo "Generated sha256sums.txt:"
          cat sha256sums.txt
          cd ..

      # Creates release with specific artifacts:
      # Upload all files from the release_assets directory
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release_assets/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, '-rc') }}

permissions:
  contents: write  # This allows creating releases
  packages: write  # This allows pushing to ghcr.io
