name: Build Common

on:
  workflow_call:
    inputs:
      upload_artifacts:
        type: boolean
        default: true
        description: 'Whether to upload build artifacts'
      verify_version:
        type: boolean
        default: true
        description: 'Whether to verify version output'

jobs:
  build:
    name: Build
    # if you change this, you need to update build.yml, docker.yml, and debian.yml, and possibly Dockerfile
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libudev-dev libclang-dev

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      # Cache rust dependencies and build artifacts
      # The cache key is constructed as: {prefix-key}-{key}-{auto-os}-{auto-arch}-{env-hash}-{lock-hash}
      # - prefix-key: defaults to "v0-rust" if not set
      # - key: user-provided key (e.g. "build")
      # - auto-os: automatically detected OS (e.g. "Linux")
      # - auto-arch: automatically detected architecture (e.g. "x64")
      # - env-hash: hash of rust version and environment variables (e.g. "ef02d19b")
      # - lock-hash: hash of Cargo.toml and Cargo.lock (e.g. "469be55e")
      #
      # Example key: v0-rust-build-Linux-x64-ef02d19b-469be55e
      #
      # If key is set, the key structure is:
      # {prefix-key}-{key}-{auto-os}-{auto-arch}-{env-hash}-{lock-hash}
      #
      # If shared-key is set, the key structure is:
      # {prefix-key}-{shared-key}-{auto-os}-{auto-arch}-{env-hash}-{lock-hash}
      #
      # Cache restoration:
      # 1. First tries to restore with the exact key
      # 2. If that fails, tries to restore with a key that starts with the restoreKey
      # 3. The restoreKey is constructed as: {prefix-key}-{auto-os}
      #    If shared-key is set, it is appended: {prefix-key}-{auto-os}-{shared-key}
      #    WARNING: This is a bug - the restoreKey will never match any cache keys because
      #    the shared-key is in the wrong position. Cache keys have shared-key before auto-os,
      #    but restoreKey has it after auto-os.
      #    See https://github.com/Swatinem/rust-cache/issues/239
      #    Without shared-key, partial matching works correctly - the restoreKey will match
      #    any cache key that starts with {prefix-key}-{auto-os}, regardless of the key,
      #    architecture, environment hash, or lock hash.
      # 4. If multiple matches are found, the most recent one is used
      #
      # The cache will be saved with the full key (e.g. "v0-rust-build-Linux-x64-ef02d19b-469be55e") when:
      # - save-if condition is met (defaults to "success()")
      # - or cache-on-failure is true
      # The cache key will update when:
      # - The rust version changes (affects env-hash)
      # - The environment variables change (affects env-hash)
      # - The Cargo.toml or Cargo.lock files change (affects lock-hash)
      # - The OS changes (affects auto-os)
      # - The architecture changes (affects auto-arch)
      # - The cache is older than the TTL (default 7 days)
      - name: Cache Rust dependencies
        id: cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: .
          cache-targets: true
          cache-all-crates: true

      - name: Install cargo-cache
        run: cargo install cargo-cache

      - name: Clean Cargo cache
        if: always()
        run: cargo cache --autoclean

      - name: Get timestamp
        id: get_timestamp
        run: echo "timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> $GITHUB_OUTPUT

      - name: Get git info
        id: get_git_info
        run: |
          echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          # Get tag for release naming, fallback for non-tag builds
          echo "tag=$(git describe --tags --always)" >> $GITHUB_OUTPUT

      - name: Build
        id: build
        run: |
          export BUILD_TIMESTAMP=${{ steps.get_timestamp.outputs.timestamp }}
          export GIT_SHA=${{ steps.get_git_info.outputs.sha }}
          export GIT_TAG=${{ steps.get_git_info.outputs.tag }}
          RUSTFLAGS="-C target-cpu=x86-64" cargo build --release || {
            echo "Build failed, clearing cache and retrying..."
            cargo clean
            RUSTFLAGS="-C target-cpu=x86-64" cargo build --release
          }

      - name: Verify version
        if: ${{ inputs.verify_version }}
        run: |
          ./target/release/snapshot-gossip-client --version

      - name: Run tests
        run: |
          cargo test -- --nocapture

      - name: Prepare staging directory for tarball
        run: |
          # Staging dir named after repo for top-level dir in tarball
          STAGING="${{ github.event.repository.name }}"
          mkdir -p ${STAGING}/bin ${STAGING}/doc ${STAGING}/etc
          cp target/release/snapshot-gossip-client ${STAGING}/bin/
          cp example-config.toml ${STAGING}/etc/
          # Copy main docs into staging/doc
          cp README.md ${STAGING}/doc/
          cp docs/* ${STAGING}/doc/
          echo "Staging directory structure:"
          ls -lR ${STAGING}/

      - name: Create versionless tar.gz bundle
        if: ${{ inputs.upload_artifacts }}
        run: |
          TOP_LEVEL_DIR="${{ github.event.repository.name }}"
          TARBALL_NAME="${TOP_LEVEL_DIR}-linux-x86_64.tar.gz"

          # Create tarball *of* the top-level directory
          tar czf "${TARBALL_NAME}" "${TOP_LEVEL_DIR}"

          echo "Created tarball:"
          ls -l "${TARBALL_NAME}"
          # Set step output instead of env var
          echo "tarball_path=${TARBALL_NAME}" >> $GITHUB_OUTPUT
        id: tarball # Keep id in case needed later, though no outputs used now

      # Upload only the versionless tar.gz bundle
      - name: Upload build artifact (tar.gz)
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: build-output-linux-x86_64 # Fixed artifact name
          # Reference step output
          path: ${{ steps.tarball.outputs.tarball_path }}
          if-no-files-found: error
