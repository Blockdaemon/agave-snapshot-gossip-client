name: Debian Package Build

on:
  workflow_call:

jobs:
  build-deb:
    name: Build Debian Package
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Download build artifacts
        uses: actions/download-artifact@v6
        with:
          name: build-output-linux-x86_64
          path: target/release

      - name: Extract binary from tarball
        working-directory: target/release
        run: |
          # Use fixed tarball name
          TARBALL="${{ github.event.repository.name }}-linux-x86_64.tar.gz"
          echo "Extracting from tarball: ${TARBALL}"

          # List tarball contents to verify paths
          echo "Listing contents of downloaded tarball:"
          tar tzf "${TARBALL}"

          # Extract binary using exact path, stripping the top-level dir
          tar xzf "${TARBALL}" --strip-components=1 "${{ github.event.repository.name }}/bin/snapshot-gossip-client"
          # Verify extraction
          ls -l bin/snapshot-gossip-client

          # Move extracted binary to the location expected by debian/rules
          mv bin/snapshot-gossip-client .
          echo "Moved binary to target/release/snapshot-gossip-client"
          ls -l snapshot-gossip-client

      - name: Verify artifact exists
        run: |
          # Check the final path after moving
          if [ ! -f "target/release/snapshot-gossip-client" ]; then
            echo "Error: Build artifact not found at expected location for deb build"
            exit 1
          fi

      - name: Set up Debian packaging environment
        run: |
          sudo apt-get update
          sudo apt-get install -y devscripts debhelper build-essential

      - name: Generate changelog
        id: changelog
        env:
          DEBEMAIL: "ci@blockdaemon.com"
        run: |
          if [[ ${{ github.ref }} == refs/tags/v* ]]; then
            # For tagged releases, use the exact version
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # For non-tagged builds, use latest tag + git hash
            LATEST_TAG=$(git describe --tags --abbrev=0)
            BASE_VERSION=${LATEST_TAG#v}
            VERSION="${BASE_VERSION}+git${GITHUB_SHA:0:7}"
          fi
          if [[ -z "$VERSION" ]]; then
            echo "Error: VERSION is not defined."
            exit 1
          fi
          dch --newversion "${VERSION}" --distribution unstable "Automated build"
          dch --release ""
          echo "PACKAGE_VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Build Debian package
        run: |
          dpkg-buildpackage -us -uc -b
          mkdir -p artifacts
          mv ../*.deb artifacts/

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: debian-packages
          path: artifacts/*.deb
          if-no-files-found: error
